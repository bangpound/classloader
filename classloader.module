<?php

/**
 * @file
 * Enables Symfony's PSR-0-compatible UniversalClassLoader for namespaced PHP classes.
 *
 * This code is a direct backport from Drupal 8.
 */

/**
 * Implements hook_boot().
 */
function classloader_boot() {
  // Activate the class loader.
  // @see D8: _drupal_bootstrap_configuration()
  drupal_classloader();

  // Register namespaces of bootstrap modules.
  // @see bootstrap_invoke_all()
  // @see D8: system_list()
  foreach (module_list(FALSE, TRUE) as $module) {
    $filename = drupal_get_filename('module', $module);
    drupal_classloader_register($module, dirname($filename));
  }
}

/**
 * Implements hook_init().
 */
function classloader_init() {
  // Register all namespaces of enabled modules.
  // @see D8: system_list()
  foreach (module_list() as $module) {
    $filename = drupal_get_filename('module', $module);
    drupal_classloader_register($module, dirname($filename));
  }
}

/**
 * Implements hook_modules_installed().
 */
function classloader_modules_installed(array $modules) {
  foreach ($modules as $module) {
    $filename = drupal_get_filename('module', $module);
    drupal_classloader_register($module, dirname($filename));
  }
}

/**
 * Implements hook_modules_enabled().
 */
function classloader_modules_enabled(array $modules) {
  classloader_modules_installed($modules);
}

/**
 * Initializes and returns the class loader.
 *
 * The class loader is responsible for lazy-loading all PSR-0 compatible
 * classes, interfaces, and traits (PHP 5.4 and later). Its only dependencies
 * are DRUPAL_ROOT and variable_get(). Otherwise it may be called as early as
 * possible.
 *
 * @return Symfony\Component\ClassLoader\UniversalClassLoader
 *   A UniversalClassLoader class instance (or extension thereof).
 */
function drupal_classloader() {
  // By default, use the UniversalClassLoader which is best for development,
  // as it does not break when code is moved on the file system. However, as it
  // is slow, allow to use the APC class loader in production.
  static $loader;

  if (!isset($loader)) {

    // @todo Use a cleaner way than variable_get() to switch autoloaders.
    switch (variable_get('autoloader_mode', 'default')) {
      case 'apc':
        if (function_exists('apc_store')) {
          $loader = new \Symfony\Component\ClassLoader\ApcUniversalClassLoader('drupal.' . $GLOBALS['drupal_hash_salt']);
          break;
        }
      // Fall through to the default loader if APC was not loaded, so that the
      // site does not fail completely.
      case 'dev':
      case 'default':
        $loader = new \Symfony\Component\ClassLoader\UniversalClassLoader();
        break;
    }

    // Register the loader with PHP.
    $loader->register();
  }
  return $loader;
}

/**
 * Registers an additional namespace.
 *
 * @param string $name
 *   The namespace component to register; e.g., 'node'.
 * @param string $path
 *   The relative path to the Drupal component in the filesystem.
 */
function drupal_classloader_register($name, $path) {
  $loader = drupal_classloader();
  $loader->registerNamespace('Drupal\\' . $name, DRUPAL_ROOT . '/' . $path . '/lib');
}
